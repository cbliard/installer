#!/bin/bash

: ${DIALOG=dialog}

: ${DIALOG_OK=0}
: ${DIALOG_CANCEL=1}
: ${DIALOG_HELP=2}
: ${DIALOG_EXTRA=3}
: ${DIALOG_ITEM_HELP=4}
: ${DIALOG_ESC=255}

: ${SIG_NONE=0}
: ${SIG_HUP=1}
: ${SIG_INT=2}
: ${SIG_QUIT=3}
: ${SIG_KILL=9}
: ${SIG_TERM=15}

set -e

wiz_buffer=""
DATABASE="${INSTALLER_DIR}/database"
touch "${DATABASE}"
INSTALLER_DEBUG=${INSTALLER_DEBUG:="no"}

debug() {
	if [ ! "${INSTALLER_DEBUG}" = "no" ]; then
		echo "[debug] $1" >&2
	fi
}

wizard() {
	STATE="$1"
	while true; do
		OLDSTATE="$STATE"
		state_machine
		if [ "$OLDSTATE" = "$STATE" ]; then
			STATE="same-state"
		fi
	done
}

wiz_set() {
	local key="$1"
	local value="$2"
	sed -i "s|${key}=.*||" "$DATABASE"
	echo "${key}=${value}" >> "$DATABASE"
}

wiz_ask() {
	for question in $wiz_buffer ; do
		wiz_dialog "$question"
	done
	wiz_clear
}

wiz_clear() {
	wiz_buffer=""
}

wiz_dialog() {
	local key="$1"
	local kind=$(wiz_meta "$key" "type")
	local title=$(wiz_meta "$key" "title")
	local description=$(wiz_meta "$key" "description")
	local default=$(wiz_get "$key" || wiz_meta "$key" "default")

	debug "key=$key type=${kind} default=${default} title=${title} description=${description}"

	set +e
	case "$kind" in
		"select")
			local choices=$(wiz_meta "$key" "choices")
			local cmd="$DIALOG --stdout --clear --title \"$key\" --default-item \"${default}\" --menu \"$description\n\n$title\" 20 68 4 $choices"
			debug "cmd=${cmd}"
			result=$(eval $cmd)
			status=$?
			;;

		"string")
			local cmd="$DIALOG --stdout --clear --title \"$key\" --inputbox \"$description\n\n$title\" 16 51 \"${default}\""
			debug "cmd=${cmd}"
			result=$(eval $cmd)
			status=$?
			;;

		"password")
			local cmd="$DIALOG --stdout --clear --title \"$key\" --insecure --passwordbox \"$description\n\n$title\" 16 51"
			debug "cmd=${cmd}"
			result=$(eval $cmd)
			status=$?
			# defaults to existing password if none given
			if [ $status -eq 0 ] && [ "$result" = "" ]; then
				result="$default"
			fi
			;;

		"boolean")
			if $DIALOG --title "$key" --clear $([ "$default" = "true" ] || echo "--defaultno") \
				--yesno "$description\n\n$title" 15 61 ; then
				result="true"
			else
				result="false"
			fi
			status=0
			;;
		*)
			echo "unknown dialog type: ${kind}"
			exit 1
			;;
	esac
	set -e

	case $status in
		$DIALOG_OK)
			wiz_set "$key" "$result"
			;;
		*)
			exit $status
			;;
	esac
}

# Given a configuration key, it returns the path to the template file
wiz_template() {
	echo "${INSTALLER_DIR}/addons/${1}/templates"
}

wiz_meta() {
	local key="$1"
	local attribute="$2"
	debug "key: $key"
	debug "attribute: ${attribute}"
	IFS='/' read -a array <<< "$key"
	local addon="${array[0]}"
	local tmpdir=$(mktemp -d)
	local addon_templates=$(wiz_template "${addon}")

	csplit -zs -f ${tmpdir}/item "$addon_templates" /^Template:/ {*}
	local template=""
	for file in ${tmpdir}/item* ; do
		if grep -q "Template: ${key}" ${file} ; then
			template="$file"
			break
		fi
	done

	if [ -z "$template" ] ; then exit 1 ; fi

	case "$attribute" in
		"type")
			sed -n -r 's|^Type: (.+)$|\1|p' "$template"
			;;
		"title")
			sed -n -r 's|^Description: (.+)$|\1|p' "$template"
			;;
		"default")
			sed -n -r 's|^Default: (.+)$|\1|p' "$template"
			;;
		"description")
			local description=$(grep -e "^\s" "$template" | xargs echo | sed -n -r "s| \. |\n|p")
			echo "$description"
			;;
		"choices")
			IFS=',' read -a choices <<< "$(sed -n -r 's|^Choices: (.+)$|\1|p' "$template" | sed -n -r 's|, |,|pg')"
			IFS=',' read -a translations <<< "$(sed -n -r 's|^Translations: (.+)$|\1|p' "$template" | sed -n -r 's|, |,|pg')"

			local result=""
			for ((i=0 ; i < ${#choices[@]}; i++)) ; do
				local i18n=$(if [ -z "${translations[$i]}" ]; then echo "${choices[$i]}" ; else echo "${translations[$i]}" ; fi)
				result="${result} \"${choices[$i]}\" \"${i18n}\""
			done
			echo $result
			;;
		*)
			echo ""
			;;
	esac
}

wiz_put() {
	wiz_buffer="$wiz_buffer $1"
}

wiz_get() {
	local key="$1"
	grep "$key=" "$DATABASE" | cut -f 2 -d "="
}
